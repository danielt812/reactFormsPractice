{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","firstName","lastName","userName","email","passWord","handleInputChange","e","_this","props","onChange","Object","defineProperty","target","name","value","setState","onSubmit","preventDefault","_this2","this","react_default","a","createElement","htmlFor","placeholder","type","onClick","Component","App","fields","updatedValue","objectSpread","className","src_Form","JSON","stringify","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QA8FeA,6MA3FbC,MAAQ,CACNC,UAAW,GACXC,SAAU,GACVC,SAAU,GACVC,MAAO,GACPC,SAAU,MAGZC,kBAAoB,SAAAC,GAClBC,EAAKC,MAAMC,SAAXC,OAAAC,EAAA,EAAAD,CAAA,GAAuBJ,EAAEM,OAAOC,KAAOP,EAAEM,OAAOE,QAChDP,EAAKQ,SAALL,OAAAC,EAAA,EAAAD,CAAA,GAAiBJ,EAAEM,OAAOC,KAAOP,EAAEM,OAAOE,WAG5CE,SAAW,SAAAV,GACTA,EAAEW,iBAEFV,EAAKQ,SAAS,CACZf,UAAW,GACXC,SAAU,GACVC,SAAU,GACVC,MAAO,GACPC,SAAU,KAEZG,EAAKC,MAAMC,SAAS,CAClBT,UAAW,GACXC,SAAU,GACVC,SAAU,GACVC,MAAO,GACPC,SAAU,8EAIL,IAAAc,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SAAOC,QAAQ,aAAf,cACAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACET,KAAK,YACLW,YAAY,aACZV,MAAOK,KAAKpB,MAAMC,UAClByB,KAAK,OACLhB,SAAU,SAAAH,GAAC,OAAIY,EAAKb,kBAAkBC,MAExCc,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOC,QAAQ,YAAf,aACAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACET,KAAK,WACLW,YAAY,YACZV,MAAOK,KAAKpB,MAAME,SAClBwB,KAAK,OACLhB,SAAU,SAAAH,GAAC,OAAIY,EAAKb,kBAAkBC,MAExCc,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOC,QAAQ,YAAf,aACAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACET,KAAK,WACLW,YAAY,WACZV,MAAOK,KAAKpB,MAAMG,SAClBuB,KAAK,OACLhB,SAAU,SAAAH,GAAC,OAAIY,EAAKb,kBAAkBC,MAExCc,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOC,QAAQ,SAAf,SACAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACET,KAAK,QACLW,YAAY,QACZV,MAAOK,KAAKpB,MAAMI,MAClBsB,KAAK,QACLhB,SAAU,SAAAH,GAAC,OAAIY,EAAKb,kBAAkBC,MAExCc,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOC,QAAQ,YAAf,YACAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACET,KAAK,WACLW,YAAY,WACZV,MAAOK,KAAKpB,MAAMK,SAClBqB,KAAK,WACLhB,SAAU,SAAAH,GAAC,OAAIY,EAAKb,kBAAkBC,MAExCc,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQI,QAAS,SAAApB,GAAC,OAAIY,EAAKF,SAASV,KAApC,kBAtFWqB,aCqBJC,oNAlBb7B,MAAQ,CACN8B,OAAQ,MAGVpB,SAAW,SAAAqB,GACTvB,EAAKQ,SAAS,CAAEc,OAAOnB,OAAAqB,EAAA,EAAArB,CAAA,GAAMH,EAAKR,MAAM8B,OAAWC,8EAG5C,IAAAZ,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACbZ,EAAAC,EAAAC,cAACW,EAAD,CAAMxB,SAAU,SAAAoB,GAAM,OAAIX,EAAKT,SAASoB,MACxCT,EAAAC,EAAAC,cAAA,SAAIY,KAAKC,UAAUhB,KAAKpB,MAAM8B,iBAbpBF,cCQES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e6d6e3cd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    userName: \"\",\r\n    email: \"\",\r\n    passWord: \"\"\r\n  };\r\n\r\n  handleInputChange = e => {\r\n    this.props.onChange({ [e.target.name]: e.target.value });\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    // this.props.onSubmit(this.state);\r\n    this.setState({\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      userName: \"\",\r\n      email: \"\",\r\n      passWord: \"\"\r\n    });\r\n    this.props.onChange({\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      userName: \"\",\r\n      email: \"\",\r\n      passWord: \"\"\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form>\r\n        <label htmlFor=\"firstName\">First Name</label>\r\n        <br />\r\n        <input\r\n          name=\"firstName\"\r\n          placeholder=\"First Name\"\r\n          value={this.state.firstName}\r\n          type=\"text\"\r\n          onChange={e => this.handleInputChange(e)}\r\n        />\r\n        <br />\r\n        <label htmlFor=\"lastName\">Last Name</label>\r\n        <br />\r\n        <input\r\n          name=\"lastName\"\r\n          placeholder=\"Last Name\"\r\n          value={this.state.lastName}\r\n          type=\"text\"\r\n          onChange={e => this.handleInputChange(e)}\r\n        />\r\n        <br />\r\n        <label htmlFor=\"userName\">User Name</label>\r\n        <br />\r\n        <input\r\n          name=\"userName\"\r\n          placeholder=\"Username\"\r\n          value={this.state.userName}\r\n          type=\"text\"\r\n          onChange={e => this.handleInputChange(e)}\r\n        />\r\n        <br />\r\n        <label htmlFor=\"email\">Email</label>\r\n        <br />\r\n        <input\r\n          name=\"email\"\r\n          placeholder=\"Email\"\r\n          value={this.state.email}\r\n          type=\"email\"\r\n          onChange={e => this.handleInputChange(e)}\r\n        />\r\n        <br />\r\n        <label htmlFor=\"passWord\">Password</label>\r\n        <br />\r\n        <input\r\n          name=\"passWord\"\r\n          placeholder=\"Password\"\r\n          value={this.state.passWord}\r\n          type=\"password\"\r\n          onChange={e => this.handleInputChange(e)}\r\n        />\r\n        <br />\r\n        <button onClick={e => this.onSubmit(e)}>Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from \"react\";\nimport Form from \"./Form\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    fields: {}\n  };\n\n  onChange = updatedValue => {\n    this.setState({ fields: { ...this.state.fields, ...updatedValue } });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form onChange={fields => this.onChange(fields)} />\n        <p>{JSON.stringify(this.state.fields)}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}